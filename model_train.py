# -*- coding: utf-8 -*-
"""Model_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NfPLUQHlg-QOdQ9Eiu-wU7fpcT6RnlUT
"""

from tensorflow.keras.layers import Dense,Conv2D,Input,MaxPool2D,ZeroPadding2D
from tensorflow.keras.layers import BatchNormalization,Dropout,LeakyReLU,add,UpSampling2D
from tensorflow.keras.layers import Concatenate,Activation
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import SGD

def DBL(filters,kernel_size,n,connect_layer):
  x = Conv2D(filters,kernel_size,padding='same',strides = (1,1),activation=LeakyReLU(alpha=0.1))(connect_layer)
  x = BatchNormalization(axis = 3)(x)
  for i in range(1,n):
    x = Conv2D(filters,kernel_size,padding='same',strides = (1,1),activation=LeakyReLU(alpha=0.1))(connect_layer)
    x = BatchNormalization(axis = 3)(x)
  return x

def res(filters,kernel_size,strides_,alpha,beta,n,connect_layer):
    #res1
    x = ZeroPadding2D(padding = 3)(connect_layer)
    x = Conv2D(filters,kernel_size,padding='same',strides = strides_,activation=LeakyReLU(alpha=0.1))(connect_layer)
    x = BatchNormalization(axis = 3)(x)
    #res_unit
    for i in range(0,n):
      previous_block_activation = x
      x = Conv2D(alpha,1,padding='same',strides = (1,1),activation=LeakyReLU(alpha=0.1))(previous_block_activation)
      x = BatchNormalization()(x)
      x = Conv2D(beta,3,padding='same',strides = (1,1),activation=LeakyReLU(alpha=0.1))(x)
      x = BatchNormalization()(x)
      x = add([x,previous_block_activation])
    return x

def Yolo_v3_Model(input_shape):
  input_layer = Input(input_shape)
  # Darknet-53 without FC layer
  #DBL
  x = Conv2D(32,3,padding='same',strides = (1,1),activation=LeakyReLU(alpha=0.1))(input_layer)
  x = BatchNormalization(axis = 3)(x)
  x = res(64,3,(2,2),32,64,1,x)
  x = res(128,3,(2,2),64,128,2,x)
  res8 = res(256,3,(2,2),128,256,8,x)
  res8_1 = res(512,3,(2,2),256,512,8,res8)
  res4 = res(1024,3,(2,2),512,1024,4,res8_1)
  DBL_1 = DBL(1024,3,5,res4)
  DBL_2 = DBL(512,3,1,DBL_1)
  Up_layer = UpSampling2D(size = (2,2))(DBL_2)
  concat_layer = Concatenate(axis = -1)([res8_1,Up_layer])
  DBL_3 = DBL(255,3,5,concat_layer)
  DBL_4 = DBL(255,3,1,DBL_3)
  conv_layer = Conv2D(512,3,padding='same',strides=(1,1),activation=LeakyReLU(alpha=0.1))(DBL_4)
  model = Model(inputs = input_layer,outputs = conv_layer)
  model.summary()

Yolo_v3_Model((416,416,3))